/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.com.snowplowanalytics.snowplow.CollectorPayload.thrift.model1;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-24")
public class CollectorPayload
        implements org.apache.thrift.TBase<CollectorPayload, CollectorPayload._Fields>, java.io.Serializable, Cloneable, Comparable<CollectorPayload> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CollectorPayload");

  private static final org.apache.thrift.protocol.TField SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("schema", org.apache.thrift.protocol.TType.STRING, (short)31337);
  private static final org.apache.thrift.protocol.TField IP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("ipAddress", org.apache.thrift.protocol.TType.STRING, (short)100);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)200);
  private static final org.apache.thrift.protocol.TField ENCODING_FIELD_DESC = new org.apache.thrift.protocol.TField("encoding", org.apache.thrift.protocol.TType.STRING, (short)210);
  private static final org.apache.thrift.protocol.TField COLLECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("collector", org.apache.thrift.protocol.TType.STRING, (short)220);
  private static final org.apache.thrift.protocol.TField USER_AGENT_FIELD_DESC = new org.apache.thrift.protocol.TField("userAgent", org.apache.thrift.protocol.TType.STRING, (short)300);
  private static final org.apache.thrift.protocol.TField REFERER_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("refererUri", org.apache.thrift.protocol.TType.STRING, (short)310);
  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)320);
  private static final org.apache.thrift.protocol.TField QUERYSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("querystring", org.apache.thrift.protocol.TType.STRING, (short)330);
  private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("body", org.apache.thrift.protocol.TType.STRING, (short)340);
  private static final org.apache.thrift.protocol.TField HEADERS_FIELD_DESC = new org.apache.thrift.protocol.TField("headers", org.apache.thrift.protocol.TType.LIST, (short)350);
  private static final org.apache.thrift.protocol.TField CONTENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("contentType", org.apache.thrift.protocol.TType.STRING, (short)360);
  private static final org.apache.thrift.protocol.TField HOSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostname", org.apache.thrift.protocol.TType.STRING, (short)400);
  private static final org.apache.thrift.protocol.TField NETWORK_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("networkUserId", org.apache.thrift.protocol.TType.STRING, (short)410);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CollectorPayloadStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CollectorPayloadTupleSchemeFactory();

  public String schema; // required
  public String ipAddress; // required
  public long timestamp; // required
  public String encoding; // required
  public String collector; // required
  public String userAgent; // optional
  public String refererUri; // optional
  public String path; // optional
  public String querystring; // optional
  public String body; // optional
  public java.util.List<String> headers; // optional
  public String contentType; // optional
  public String hostname; // optional
  public String networkUserId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SCHEMA((short)31337, "schema"),
    IP_ADDRESS((short)100, "ipAddress"),
    TIMESTAMP((short)200, "timestamp"),
    ENCODING((short)210, "encoding"),
    COLLECTOR((short)220, "collector"),
    USER_AGENT((short)300, "userAgent"),
    REFERER_URI((short)310, "refererUri"),
    PATH((short)320, "path"),
    QUERYSTRING((short)330, "querystring"),
    BODY((short)340, "body"),
    HEADERS((short)350, "headers"),
    CONTENT_TYPE((short)360, "contentType"),
    HOSTNAME((short)400, "hostname"),
    NETWORK_USER_ID((short)410, "networkUserId");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 31337: // SCHEMA
          return SCHEMA;
        case 100: // IP_ADDRESS
          return IP_ADDRESS;
        case 200: // TIMESTAMP
          return TIMESTAMP;
        case 210: // ENCODING
          return ENCODING;
        case 220: // COLLECTOR
          return COLLECTOR;
        case 300: // USER_AGENT
          return USER_AGENT;
        case 310: // REFERER_URI
          return REFERER_URI;
        case 320: // PATH
          return PATH;
        case 330: // QUERYSTRING
          return QUERYSTRING;
        case 340: // BODY
          return BODY;
        case 350: // HEADERS
          return HEADERS;
        case 360: // CONTENT_TYPE
          return CONTENT_TYPE;
        case 400: // HOSTNAME
          return HOSTNAME;
        case 410: // NETWORK_USER_ID
          return NETWORK_USER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.USER_AGENT, _Fields.REFERER_URI, _Fields.PATH, _Fields.QUERYSTRING,
                                              _Fields.BODY, _Fields.HEADERS, _Fields.CONTENT_TYPE, _Fields.HOSTNAME,
                                              _Fields.NETWORK_USER_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("schema", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("ipAddress", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENCODING, new org.apache.thrift.meta_data.FieldMetaData("encoding", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLLECTOR, new org.apache.thrift.meta_data.FieldMetaData("collector", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_AGENT, new org.apache.thrift.meta_data.FieldMetaData("userAgent", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFERER_URI, new org.apache.thrift.meta_data.FieldMetaData("refererUri", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERYSTRING, new org.apache.thrift.meta_data.FieldMetaData("querystring", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("body", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HEADERS, new org.apache.thrift.meta_data.FieldMetaData("headers", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CONTENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("contentType", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOSTNAME, new org.apache.thrift.meta_data.FieldMetaData("hostname", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NETWORK_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("networkUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CollectorPayload.class, metaDataMap);
  }

  public CollectorPayload() {
  }

  public CollectorPayload(
    String schema,
    String ipAddress,
    long timestamp,
    String encoding,
    String collector)
  {
    this();
    this.schema = schema;
    this.ipAddress = ipAddress;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.encoding = encoding;
    this.collector = collector;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CollectorPayload(CollectorPayload other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSchema()) {
      this.schema = other.schema;
    }
    if (other.isSetIpAddress()) {
      this.ipAddress = other.ipAddress;
    }
    this.timestamp = other.timestamp;
    if (other.isSetEncoding()) {
      this.encoding = other.encoding;
    }
    if (other.isSetCollector()) {
      this.collector = other.collector;
    }
    if (other.isSetUserAgent()) {
      this.userAgent = other.userAgent;
    }
    if (other.isSetRefererUri()) {
      this.refererUri = other.refererUri;
    }
    if (other.isSetPath()) {
      this.path = other.path;
    }
    if (other.isSetQuerystring()) {
      this.querystring = other.querystring;
    }
    if (other.isSetBody()) {
      this.body = other.body;
    }
    if (other.isSetHeaders()) {
      java.util.List<String> __this__headers = new java.util.ArrayList<String>(other.headers);
      this.headers = __this__headers;
    }
    if (other.isSetContentType()) {
      this.contentType = other.contentType;
    }
    if (other.isSetHostname()) {
      this.hostname = other.hostname;
    }
    if (other.isSetNetworkUserId()) {
      this.networkUserId = other.networkUserId;
    }
  }

  public CollectorPayload deepCopy() {
    return new CollectorPayload(this);
  }

  @Override
  public void clear() {
    this.schema = null;
    this.ipAddress = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.encoding = null;
    this.collector = null;
    this.userAgent = null;
    this.refererUri = null;
    this.path = null;
    this.querystring = null;
    this.body = null;
    this.headers = null;
    this.contentType = null;
    this.hostname = null;
    this.networkUserId = null;
  }

  public String getSchema() {
    return this.schema;
  }

  public CollectorPayload setSchema(String schema) {
    this.schema = schema;
    return this;
  }

  public void unsetSchema() {
    this.schema = null;
  }

  /** Returns true if field schema is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema() {
    return this.schema != null;
  }

  public void setSchemaIsSet(boolean value) {
    if (!value) {
      this.schema = null;
    }
  }

  public String getIpAddress() {
    return this.ipAddress;
  }

  public CollectorPayload setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  public void unsetIpAddress() {
    this.ipAddress = null;
  }

  /** Returns true if field ipAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetIpAddress() {
    return this.ipAddress != null;
  }

  public void setIpAddressIsSet(boolean value) {
    if (!value) {
      this.ipAddress = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public CollectorPayload setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public String getEncoding() {
    return this.encoding;
  }

  public CollectorPayload setEncoding(String encoding) {
    this.encoding = encoding;
    return this;
  }

  public void unsetEncoding() {
    this.encoding = null;
  }

  /** Returns true if field encoding is set (has been assigned a value) and false otherwise */
  public boolean isSetEncoding() {
    return this.encoding != null;
  }

  public void setEncodingIsSet(boolean value) {
    if (!value) {
      this.encoding = null;
    }
  }

  public String getCollector() {
    return this.collector;
  }

  public CollectorPayload setCollector(String collector) {
    this.collector = collector;
    return this;
  }

  public void unsetCollector() {
    this.collector = null;
  }

  /** Returns true if field collector is set (has been assigned a value) and false otherwise */
  public boolean isSetCollector() {
    return this.collector != null;
  }

  public void setCollectorIsSet(boolean value) {
    if (!value) {
      this.collector = null;
    }
  }

  public String getUserAgent() {
    return this.userAgent;
  }

  public CollectorPayload setUserAgent(String userAgent) {
    this.userAgent = userAgent;
    return this;
  }

  public void unsetUserAgent() {
    this.userAgent = null;
  }

  /** Returns true if field userAgent is set (has been assigned a value) and false otherwise */
  public boolean isSetUserAgent() {
    return this.userAgent != null;
  }

  public void setUserAgentIsSet(boolean value) {
    if (!value) {
      this.userAgent = null;
    }
  }

  public String getRefererUri() {
    return this.refererUri;
  }

  public CollectorPayload setRefererUri(String refererUri) {
    this.refererUri = refererUri;
    return this;
  }

  public void unsetRefererUri() {
    this.refererUri = null;
  }

  /** Returns true if field refererUri is set (has been assigned a value) and false otherwise */
  public boolean isSetRefererUri() {
    return this.refererUri != null;
  }

  public void setRefererUriIsSet(boolean value) {
    if (!value) {
      this.refererUri = null;
    }
  }

  public String getPath() {
    return this.path;
  }

  public CollectorPayload setPath(String path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  public String getQuerystring() {
    return this.querystring;
  }

  public CollectorPayload setQuerystring(String querystring) {
    this.querystring = querystring;
    return this;
  }

  public void unsetQuerystring() {
    this.querystring = null;
  }

  /** Returns true if field querystring is set (has been assigned a value) and false otherwise */
  public boolean isSetQuerystring() {
    return this.querystring != null;
  }

  public void setQuerystringIsSet(boolean value) {
    if (!value) {
      this.querystring = null;
    }
  }

  public String getBody() {
    return this.body;
  }

  public CollectorPayload setBody(String body) {
    this.body = body;
    return this;
  }

  public void unsetBody() {
    this.body = null;
  }

  /** Returns true if field body is set (has been assigned a value) and false otherwise */
  public boolean isSetBody() {
    return this.body != null;
  }

  public void setBodyIsSet(boolean value) {
    if (!value) {
      this.body = null;
    }
  }

  public int getHeadersSize() {
    return (this.headers == null) ? 0 : this.headers.size();
  }

  public java.util.Iterator<String> getHeadersIterator() {
    return (this.headers == null) ? null : this.headers.iterator();
  }

  public void addToHeaders(String elem) {
    if (this.headers == null) {
      this.headers = new java.util.ArrayList<String>();
    }
    this.headers.add(elem);
  }

  public java.util.List<String> getHeaders() {
    return this.headers;
  }

  public CollectorPayload setHeaders(java.util.List<String> headers) {
    this.headers = headers;
    return this;
  }

  public void unsetHeaders() {
    this.headers = null;
  }

  /** Returns true if field headers is set (has been assigned a value) and false otherwise */
  public boolean isSetHeaders() {
    return this.headers != null;
  }

  public void setHeadersIsSet(boolean value) {
    if (!value) {
      this.headers = null;
    }
  }

  public String getContentType() {
    return this.contentType;
  }

  public CollectorPayload setContentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  public void unsetContentType() {
    this.contentType = null;
  }

  /** Returns true if field contentType is set (has been assigned a value) and false otherwise */
  public boolean isSetContentType() {
    return this.contentType != null;
  }

  public void setContentTypeIsSet(boolean value) {
    if (!value) {
      this.contentType = null;
    }
  }

  public String getHostname() {
    return this.hostname;
  }

  public CollectorPayload setHostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  public void unsetHostname() {
    this.hostname = null;
  }

  /** Returns true if field hostname is set (has been assigned a value) and false otherwise */
  public boolean isSetHostname() {
    return this.hostname != null;
  }

  public void setHostnameIsSet(boolean value) {
    if (!value) {
      this.hostname = null;
    }
  }

  public String getNetworkUserId() {
    return this.networkUserId;
  }

  public CollectorPayload setNetworkUserId(String networkUserId) {
    this.networkUserId = networkUserId;
    return this;
  }

  public void unsetNetworkUserId() {
    this.networkUserId = null;
  }

  /** Returns true if field networkUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetNetworkUserId() {
    return this.networkUserId != null;
  }

  public void setNetworkUserIdIsSet(boolean value) {
    if (!value) {
      this.networkUserId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SCHEMA:
      if (value == null) {
        unsetSchema();
      } else {
        setSchema((String)value);
      }
      break;

    case IP_ADDRESS:
      if (value == null) {
        unsetIpAddress();
      } else {
        setIpAddress((String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case ENCODING:
      if (value == null) {
        unsetEncoding();
      } else {
        setEncoding((String)value);
      }
      break;

    case COLLECTOR:
      if (value == null) {
        unsetCollector();
      } else {
        setCollector((String)value);
      }
      break;

    case USER_AGENT:
      if (value == null) {
        unsetUserAgent();
      } else {
        setUserAgent((String)value);
      }
      break;

    case REFERER_URI:
      if (value == null) {
        unsetRefererUri();
      } else {
        setRefererUri((String)value);
      }
      break;

    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((String)value);
      }
      break;

    case QUERYSTRING:
      if (value == null) {
        unsetQuerystring();
      } else {
        setQuerystring((String)value);
      }
      break;

    case BODY:
      if (value == null) {
        unsetBody();
      } else {
        setBody((String)value);
      }
      break;

    case HEADERS:
      if (value == null) {
        unsetHeaders();
      } else {
        setHeaders((java.util.List<String>)value);
      }
      break;

    case CONTENT_TYPE:
      if (value == null) {
        unsetContentType();
      } else {
        setContentType((String)value);
      }
      break;

    case HOSTNAME:
      if (value == null) {
        unsetHostname();
      } else {
        setHostname((String)value);
      }
      break;

    case NETWORK_USER_ID:
      if (value == null) {
        unsetNetworkUserId();
      } else {
        setNetworkUserId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SCHEMA:
      return getSchema();

    case IP_ADDRESS:
      return getIpAddress();

    case TIMESTAMP:
      return getTimestamp();

    case ENCODING:
      return getEncoding();

    case COLLECTOR:
      return getCollector();

    case USER_AGENT:
      return getUserAgent();

    case REFERER_URI:
      return getRefererUri();

    case PATH:
      return getPath();

    case QUERYSTRING:
      return getQuerystring();

    case BODY:
      return getBody();

    case HEADERS:
      return getHeaders();

    case CONTENT_TYPE:
      return getContentType();

    case HOSTNAME:
      return getHostname();

    case NETWORK_USER_ID:
      return getNetworkUserId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SCHEMA:
      return isSetSchema();
    case IP_ADDRESS:
      return isSetIpAddress();
    case TIMESTAMP:
      return isSetTimestamp();
    case ENCODING:
      return isSetEncoding();
    case COLLECTOR:
      return isSetCollector();
    case USER_AGENT:
      return isSetUserAgent();
    case REFERER_URI:
      return isSetRefererUri();
    case PATH:
      return isSetPath();
    case QUERYSTRING:
      return isSetQuerystring();
    case BODY:
      return isSetBody();
    case HEADERS:
      return isSetHeaders();
    case CONTENT_TYPE:
      return isSetContentType();
    case HOSTNAME:
      return isSetHostname();
    case NETWORK_USER_ID:
      return isSetNetworkUserId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CollectorPayload)
      return this.equals((CollectorPayload)that);
    return false;
  }

  public boolean equals(CollectorPayload that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_schema = true && this.isSetSchema();
    boolean that_present_schema = true && that.isSetSchema();
    if (this_present_schema || that_present_schema) {
      if (!(this_present_schema && that_present_schema))
        return false;
      if (!this.schema.equals(that.schema))
        return false;
    }

    boolean this_present_ipAddress = true && this.isSetIpAddress();
    boolean that_present_ipAddress = true && that.isSetIpAddress();
    if (this_present_ipAddress || that_present_ipAddress) {
      if (!(this_present_ipAddress && that_present_ipAddress))
        return false;
      if (!this.ipAddress.equals(that.ipAddress))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_encoding = true && this.isSetEncoding();
    boolean that_present_encoding = true && that.isSetEncoding();
    if (this_present_encoding || that_present_encoding) {
      if (!(this_present_encoding && that_present_encoding))
        return false;
      if (!this.encoding.equals(that.encoding))
        return false;
    }

    boolean this_present_collector = true && this.isSetCollector();
    boolean that_present_collector = true && that.isSetCollector();
    if (this_present_collector || that_present_collector) {
      if (!(this_present_collector && that_present_collector))
        return false;
      if (!this.collector.equals(that.collector))
        return false;
    }

    boolean this_present_userAgent = true && this.isSetUserAgent();
    boolean that_present_userAgent = true && that.isSetUserAgent();
    if (this_present_userAgent || that_present_userAgent) {
      if (!(this_present_userAgent && that_present_userAgent))
        return false;
      if (!this.userAgent.equals(that.userAgent))
        return false;
    }

    boolean this_present_refererUri = true && this.isSetRefererUri();
    boolean that_present_refererUri = true && that.isSetRefererUri();
    if (this_present_refererUri || that_present_refererUri) {
      if (!(this_present_refererUri && that_present_refererUri))
        return false;
      if (!this.refererUri.equals(that.refererUri))
        return false;
    }

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    boolean this_present_querystring = true && this.isSetQuerystring();
    boolean that_present_querystring = true && that.isSetQuerystring();
    if (this_present_querystring || that_present_querystring) {
      if (!(this_present_querystring && that_present_querystring))
        return false;
      if (!this.querystring.equals(that.querystring))
        return false;
    }

    boolean this_present_body = true && this.isSetBody();
    boolean that_present_body = true && that.isSetBody();
    if (this_present_body || that_present_body) {
      if (!(this_present_body && that_present_body))
        return false;
      if (!this.body.equals(that.body))
        return false;
    }

    boolean this_present_headers = true && this.isSetHeaders();
    boolean that_present_headers = true && that.isSetHeaders();
    if (this_present_headers || that_present_headers) {
      if (!(this_present_headers && that_present_headers))
        return false;
      if (!this.headers.equals(that.headers))
        return false;
    }

    boolean this_present_contentType = true && this.isSetContentType();
    boolean that_present_contentType = true && that.isSetContentType();
    if (this_present_contentType || that_present_contentType) {
      if (!(this_present_contentType && that_present_contentType))
        return false;
      if (!this.contentType.equals(that.contentType))
        return false;
    }

    boolean this_present_hostname = true && this.isSetHostname();
    boolean that_present_hostname = true && that.isSetHostname();
    if (this_present_hostname || that_present_hostname) {
      if (!(this_present_hostname && that_present_hostname))
        return false;
      if (!this.hostname.equals(that.hostname))
        return false;
    }

    boolean this_present_networkUserId = true && this.isSetNetworkUserId();
    boolean that_present_networkUserId = true && that.isSetNetworkUserId();
    if (this_present_networkUserId || that_present_networkUserId) {
      if (!(this_present_networkUserId && that_present_networkUserId))
        return false;
      if (!this.networkUserId.equals(that.networkUserId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSchema()) ? 131071 : 524287);
    if (isSetSchema())
      hashCode = hashCode * 8191 + schema.hashCode();

    hashCode = hashCode * 8191 + ((isSetIpAddress()) ? 131071 : 524287);
    if (isSetIpAddress())
      hashCode = hashCode * 8191 + ipAddress.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + ((isSetEncoding()) ? 131071 : 524287);
    if (isSetEncoding())
      hashCode = hashCode * 8191 + encoding.hashCode();

    hashCode = hashCode * 8191 + ((isSetCollector()) ? 131071 : 524287);
    if (isSetCollector())
      hashCode = hashCode * 8191 + collector.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserAgent()) ? 131071 : 524287);
    if (isSetUserAgent())
      hashCode = hashCode * 8191 + userAgent.hashCode();

    hashCode = hashCode * 8191 + ((isSetRefererUri()) ? 131071 : 524287);
    if (isSetRefererUri())
      hashCode = hashCode * 8191 + refererUri.hashCode();

    hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
    if (isSetPath())
      hashCode = hashCode * 8191 + path.hashCode();

    hashCode = hashCode * 8191 + ((isSetQuerystring()) ? 131071 : 524287);
    if (isSetQuerystring())
      hashCode = hashCode * 8191 + querystring.hashCode();

    hashCode = hashCode * 8191 + ((isSetBody()) ? 131071 : 524287);
    if (isSetBody())
      hashCode = hashCode * 8191 + body.hashCode();

    hashCode = hashCode * 8191 + ((isSetHeaders()) ? 131071 : 524287);
    if (isSetHeaders())
      hashCode = hashCode * 8191 + headers.hashCode();

    hashCode = hashCode * 8191 + ((isSetContentType()) ? 131071 : 524287);
    if (isSetContentType())
      hashCode = hashCode * 8191 + contentType.hashCode();

    hashCode = hashCode * 8191 + ((isSetHostname()) ? 131071 : 524287);
    if (isSetHostname())
      hashCode = hashCode * 8191 + hostname.hashCode();

    hashCode = hashCode * 8191 + ((isSetNetworkUserId()) ? 131071 : 524287);
    if (isSetNetworkUserId())
      hashCode = hashCode * 8191 + networkUserId.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(CollectorPayload other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSchema()).compareTo(other.isSetSchema());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema, other.schema);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpAddress()).compareTo(other.isSetIpAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipAddress, other.ipAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEncoding()).compareTo(other.isSetEncoding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncoding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encoding, other.encoding);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollector()).compareTo(other.isSetCollector());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollector()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collector, other.collector);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserAgent()).compareTo(other.isSetUserAgent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserAgent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userAgent, other.userAgent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefererUri()).compareTo(other.isSetRefererUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefererUri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refererUri, other.refererUri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuerystring()).compareTo(other.isSetQuerystring());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuerystring()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.querystring, other.querystring);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBody()).compareTo(other.isSetBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.body, other.body);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeaders()).compareTo(other.isSetHeaders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeaders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headers, other.headers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentType()).compareTo(other.isSetContentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentType, other.contentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostname()).compareTo(other.isSetHostname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostname, other.hostname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNetworkUserId()).compareTo(other.isSetNetworkUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetworkUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.networkUserId, other.networkUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CollectorPayload(");
    boolean first = true;

    sb.append("schema:");
    if (this.schema == null) {
      sb.append("null");
    } else {
      sb.append(this.schema);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ipAddress:");
    if (this.ipAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.ipAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("encoding:");
    if (this.encoding == null) {
      sb.append("null");
    } else {
      sb.append(this.encoding);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("collector:");
    if (this.collector == null) {
      sb.append("null");
    } else {
      sb.append(this.collector);
    }
    first = false;
    if (isSetUserAgent()) {
      if (!first) sb.append(", ");
      sb.append("userAgent:");
      if (this.userAgent == null) {
        sb.append("null");
      } else {
        sb.append(this.userAgent);
      }
      first = false;
    }
    if (isSetRefererUri()) {
      if (!first) sb.append(", ");
      sb.append("refererUri:");
      if (this.refererUri == null) {
        sb.append("null");
      } else {
        sb.append(this.refererUri);
      }
      first = false;
    }
    if (isSetPath()) {
      if (!first) sb.append(", ");
      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
    }
    if (isSetQuerystring()) {
      if (!first) sb.append(", ");
      sb.append("querystring:");
      if (this.querystring == null) {
        sb.append("null");
      } else {
        sb.append(this.querystring);
      }
      first = false;
    }
    if (isSetBody()) {
      if (!first) sb.append(", ");
      sb.append("body:");
      if (this.body == null) {
        sb.append("null");
      } else {
        sb.append(this.body);
      }
      first = false;
    }
    if (isSetHeaders()) {
      if (!first) sb.append(", ");
      sb.append("headers:");
      if (this.headers == null) {
        sb.append("null");
      } else {
        sb.append(this.headers);
      }
      first = false;
    }
    if (isSetContentType()) {
      if (!first) sb.append(", ");
      sb.append("contentType:");
      if (this.contentType == null) {
        sb.append("null");
      } else {
        sb.append(this.contentType);
      }
      first = false;
    }
    if (isSetHostname()) {
      if (!first) sb.append(", ");
      sb.append("hostname:");
      if (this.hostname == null) {
        sb.append("null");
      } else {
        sb.append(this.hostname);
      }
      first = false;
    }
    if (isSetNetworkUserId()) {
      if (!first) sb.append(", ");
      sb.append("networkUserId:");
      if (this.networkUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.networkUserId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CollectorPayloadStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CollectorPayloadStandardScheme getScheme() {
      return new CollectorPayloadStandardScheme();
    }
  }

  private static class CollectorPayloadStandardScheme extends org.apache.thrift.scheme.StandardScheme<CollectorPayload> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CollectorPayload struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 31337: // SCHEMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.schema = iprot.readString();
              struct.setSchemaIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // IP_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ipAddress = iprot.readString();
              struct.setIpAddressIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 200: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 210: // ENCODING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.encoding = iprot.readString();
              struct.setEncodingIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 220: // COLLECTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.collector = iprot.readString();
              struct.setCollectorIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 300: // USER_AGENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userAgent = iprot.readString();
              struct.setUserAgentIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 310: // REFERER_URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refererUri = iprot.readString();
              struct.setRefererUriIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 320: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.path = iprot.readString();
              struct.setPathIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 330: // QUERYSTRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.querystring = iprot.readString();
              struct.setQuerystringIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 340: // BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.body = iprot.readString();
              struct.setBodyIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 350: // HEADERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.headers = new java.util.ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.headers.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setHeadersIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 360: // CONTENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contentType = iprot.readString();
              struct.setContentTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 400: // HOSTNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostname = iprot.readString();
              struct.setHostnameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 410: // NETWORK_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.networkUserId = iprot.readString();
              struct.setNetworkUserIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CollectorPayload struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ipAddress != null) {
        oprot.writeFieldBegin(IP_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.ipAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.encoding != null) {
        oprot.writeFieldBegin(ENCODING_FIELD_DESC);
        oprot.writeString(struct.encoding);
        oprot.writeFieldEnd();
      }
      if (struct.collector != null) {
        oprot.writeFieldBegin(COLLECTOR_FIELD_DESC);
        oprot.writeString(struct.collector);
        oprot.writeFieldEnd();
      }
      if (struct.userAgent != null) {
        if (struct.isSetUserAgent()) {
          oprot.writeFieldBegin(USER_AGENT_FIELD_DESC);
          oprot.writeString(struct.userAgent);
          oprot.writeFieldEnd();
        }
      }
      if (struct.refererUri != null) {
        if (struct.isSetRefererUri()) {
          oprot.writeFieldBegin(REFERER_URI_FIELD_DESC);
          oprot.writeString(struct.refererUri);
          oprot.writeFieldEnd();
        }
      }
      if (struct.path != null) {
        if (struct.isSetPath()) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
      }
      if (struct.querystring != null) {
        if (struct.isSetQuerystring()) {
          oprot.writeFieldBegin(QUERYSTRING_FIELD_DESC);
          oprot.writeString(struct.querystring);
          oprot.writeFieldEnd();
        }
      }
      if (struct.body != null) {
        if (struct.isSetBody()) {
          oprot.writeFieldBegin(BODY_FIELD_DESC);
          oprot.writeString(struct.body);
          oprot.writeFieldEnd();
        }
      }
      if (struct.headers != null) {
        if (struct.isSetHeaders()) {
          oprot.writeFieldBegin(HEADERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.headers.size()));
            for (String _iter3 : struct.headers)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.contentType != null) {
        if (struct.isSetContentType()) {
          oprot.writeFieldBegin(CONTENT_TYPE_FIELD_DESC);
          oprot.writeString(struct.contentType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hostname != null) {
        if (struct.isSetHostname()) {
          oprot.writeFieldBegin(HOSTNAME_FIELD_DESC);
          oprot.writeString(struct.hostname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.networkUserId != null) {
        if (struct.isSetNetworkUserId()) {
          oprot.writeFieldBegin(NETWORK_USER_ID_FIELD_DESC);
          oprot.writeString(struct.networkUserId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.schema != null) {
        oprot.writeFieldBegin(SCHEMA_FIELD_DESC);
        oprot.writeString(struct.schema);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CollectorPayloadTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CollectorPayloadTupleScheme getScheme() {
      return new CollectorPayloadTupleScheme();
    }
  }

  private static class CollectorPayloadTupleScheme extends org.apache.thrift.scheme.TupleScheme<CollectorPayload> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CollectorPayload struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSchema()) {
        optionals.set(0);
      }
      if (struct.isSetIpAddress()) {
        optionals.set(1);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(2);
      }
      if (struct.isSetEncoding()) {
        optionals.set(3);
      }
      if (struct.isSetCollector()) {
        optionals.set(4);
      }
      if (struct.isSetUserAgent()) {
        optionals.set(5);
      }
      if (struct.isSetRefererUri()) {
        optionals.set(6);
      }
      if (struct.isSetPath()) {
        optionals.set(7);
      }
      if (struct.isSetQuerystring()) {
        optionals.set(8);
      }
      if (struct.isSetBody()) {
        optionals.set(9);
      }
      if (struct.isSetHeaders()) {
        optionals.set(10);
      }
      if (struct.isSetContentType()) {
        optionals.set(11);
      }
      if (struct.isSetHostname()) {
        optionals.set(12);
      }
      if (struct.isSetNetworkUserId()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetSchema()) {
        oprot.writeString(struct.schema);
      }
      if (struct.isSetIpAddress()) {
        oprot.writeString(struct.ipAddress);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetEncoding()) {
        oprot.writeString(struct.encoding);
      }
      if (struct.isSetCollector()) {
        oprot.writeString(struct.collector);
      }
      if (struct.isSetUserAgent()) {
        oprot.writeString(struct.userAgent);
      }
      if (struct.isSetRefererUri()) {
        oprot.writeString(struct.refererUri);
      }
      if (struct.isSetPath()) {
        oprot.writeString(struct.path);
      }
      if (struct.isSetQuerystring()) {
        oprot.writeString(struct.querystring);
      }
      if (struct.isSetBody()) {
        oprot.writeString(struct.body);
      }
      if (struct.isSetHeaders()) {
        {
          oprot.writeI32(struct.headers.size());
          for (String _iter4 : struct.headers)
          {
            oprot.writeString(_iter4);
          }
        }
      }
      if (struct.isSetContentType()) {
        oprot.writeString(struct.contentType);
      }
      if (struct.isSetHostname()) {
        oprot.writeString(struct.hostname);
      }
      if (struct.isSetNetworkUserId()) {
        oprot.writeString(struct.networkUserId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CollectorPayload struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.schema = iprot.readString();
        struct.setSchemaIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ipAddress = iprot.readString();
        struct.setIpAddressIsSet(true);
      }
      if (incoming.get(2)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(3)) {
        struct.encoding = iprot.readString();
        struct.setEncodingIsSet(true);
      }
      if (incoming.get(4)) {
        struct.collector = iprot.readString();
        struct.setCollectorIsSet(true);
      }
      if (incoming.get(5)) {
        struct.userAgent = iprot.readString();
        struct.setUserAgentIsSet(true);
      }
      if (incoming.get(6)) {
        struct.refererUri = iprot.readString();
        struct.setRefererUriIsSet(true);
      }
      if (incoming.get(7)) {
        struct.path = iprot.readString();
        struct.setPathIsSet(true);
      }
      if (incoming.get(8)) {
        struct.querystring = iprot.readString();
        struct.setQuerystringIsSet(true);
      }
      if (incoming.get(9)) {
        struct.body = iprot.readString();
        struct.setBodyIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.headers = new java.util.ArrayList<String>(_list5.size);
          String _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.headers.add(_elem6);
          }
        }
        struct.setHeadersIsSet(true);
      }
      if (incoming.get(11)) {
        struct.contentType = iprot.readString();
        struct.setContentTypeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.hostname = iprot.readString();
        struct.setHostnameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.networkUserId = iprot.readString();
        struct.setNetworkUserIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

